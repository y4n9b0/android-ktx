project.afterEvaluate {
    project.plugins.withId('com.android.application') {
        project.android.applicationVariants.all { variant ->
            predicate(variant)
        }
    }
    project.plugins.withId('com.android.library') {
        project.android.libraryVariants.all { variant ->
            predicate(variant)
        }
    }
}

def predicate(variant) {
    tasks.create(
            group: "dependency",
            name: "flatDeps${variant.name.capitalize()}",
            description: "flat all dependencies"
    ) {
        doLast {
            def logDir = file("$buildDir${File.separator}outputs${File.separator}logs")
                    .with(true) {
                        it.mkdirs()
                    }

            file("${logDir}${File.separator}flatDeps${variant.name.capitalize()}.txt")
                    .with(true) {
                        delete(it)
                    }
                    .withOutputStream { outputStream ->
                        Configuration configuration
                        try {
                            configuration = project.configurations."${variant.name}CompileClasspath"
                        } catch (Exception ignored) {
                            configuration = project.configurations."_${variant.name}Compile"
                        }
                        configuration.resolvedConfiguration.lenientConfiguration.allModuleDependencies
                                .sort(true, new Comparator<ResolvedDependency>() {
                                    @Override
                                    int compare(ResolvedDependency l, ResolvedDependency r) {
                                        def idL = l.module.id
                                        def idR = r.module.id
                                        def groupResult = idL.group <=> idR.group
                                        def artifactResult = idL.name <=> idR.name
                                        def versionResult = idL.version <=> idR.version
                                        return groupResult != 0 ? groupResult : (artifactResult != 0 ? artifactResult : versionResult)
                                    }
                                })
                                .each {
                                    def identifier = it.module.id
                                    outputStream.write("${identifier.group}:${identifier.name}:${identifier.version}\n".getBytes())
                                }
                    }
        }
    }
}
